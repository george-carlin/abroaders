class PassengerSurvey < Form

  ACCOUNT_GETTERS   = %i[time_zone shares_expenses]
  ACCOUNT_SETTERS   = ACCOUNT_GETTERS.map { |g| "#{g}=" }
  ACCOUNT_ACCESSORS = ACCOUNT_GETTERS + ACCOUNT_SETTERS

  PASSENGER_GETTERS = %i[
    first_name
    middle_names
    last_name
    phone_number
    whatsapp
    text_message
    imessage
    citizenship
    willing_to_apply
  ]

  PASSENGER_SETTERS   = PASSENGER_GETTERS.map { |g| "#{g}=" }
  PASSENGER_ACCESSORS = PASSENGER_GETTERS + PASSENGER_SETTERS

  attr_accessor :account, :main_passenger, :companion
  attr_reader :has_companion

  # The checkboxes generated by Rails's form will submit "1" for true
  # and "0" for false, both of which Ruby will treat as truthy - so clean
  # it up here:
  def has_companion=(bool)
    @has_companion = bool == "0" ? false : !!bool
  end

  def has_companion?
    self.has_companion
  end

  delegate :shares_expenses, :shares_expenses=, :time_zone, :time_zone=,
            to: :account
  delegate(*PASSENGER_ACCESSORS, to: :main_passenger, prefix: true)
  delegate(*PASSENGER_ACCESSORS, to: :companion, prefix: true)

  def initialize(account)
    # Make a sanity checks that the passengers have not already been added:
    raise if account.main_passenger.try(:persisted?)
    raise if account.companion.try(:persisted?)

    account.build_main_passenger if account.main_passenger.nil?
    account.build_companion      if account.companion.nil?
    self.main_passenger = account.main_passenger
    self.companion      = account.companion

    self.account = account

    self.has_companion = false
  end

  def assign_attributes(attributes)
    self.has_companion = attributes.delete(:has_companion)
    attributes.each do |key, value|
      next if !has_companion && /^companion_/ =~ key.to_s
      self.send "#{key}=", value
    end
  end

  def save
    Passenger.transaction do
      if valid?
        unless has_companion?
          # Remove the blank Passenger that was created earlier by
          # `build_companion` - otherwise `account.save` will attempt to save
          # it with invalid attributes, raising an error.
          self.account.companion = nil
        end
        # As well as saving the account, this  will automatically save the
        # associated passenger(s):
        self.account.save(validate: false)
        true
      else
        false
      end
    end
  end

  def update_attributes(attributes)
    assign_attributes(attributes)
    save
  end

  # Validations

  validates :time_zone, presence: true

  validates :main_passenger_first_name,   presence: true
  validates :main_passenger_last_name,    presence: true
  validates :main_passenger_phone_number, presence: true

  validates :companion_first_name,   presence: { if: :has_companion? }
  validates :companion_last_name,    presence: { if: :has_companion? }
  validates :companion_phone_number, presence: { if: :has_companion? }

  validate :at_least_one_passenger_is_willing_to_apply, if: :has_companion?

  # TODO validate phone number looks like a valid phone number
  # TODO strip leading/trailing whitespace from string cols

  private

  def at_least_one_passenger_is_willing_to_apply
    if !(main_passenger.willing_to_apply? || companion.willing_to_apply)
      errors.add(:base, "At least one passenger must be willing to apply")
    end
  end
end
